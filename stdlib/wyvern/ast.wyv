module ast

import wyvern.collections.list
import wyvern.internal.ast

type AST = ast.AST

type Decl = ast.Decl

type Type = ast.Type

// Expressions
def object(decls : list.List) : AST = ast.object(decls)

def int(i:Int):AST = ast.int(i)

def string(s:String):AST = ast.string(s)

def variable(s:String):AST = ast.variable(s)

def call(receiver:AST, methodName:String, arguments:list.List):AST = ast.call(receiver, methodName, arguments)

def let(ident : String, bindingType : Type, bindingValue : AST, inExpr : AST) : AST = ast.let(ident, bindingType, bindingValue, inExpr)

def parseExpression(input : String, ctx : system.Context) : AST = ast.parseExpression(input, ctx)

// Declarations
def defn(name:String,resultType:Type,body:AST):Decl = ast.defn(name, resultType, body)

// Types
val types = ast.types

// Utility Functions
def stripLeadingWhitespace(input : String) : String = ast.stripLeadingWhitespace(input)

def genIdent() : String = ast.genIdent()

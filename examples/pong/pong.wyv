import pygame

resource type GameLoop
  val fps : Int
  val done : Boolean
  def oneIteration() : Unit
  def processEvent(e : pygame.Event) : Unit

val clock : pygame.Clock = pygame.helper.makeClock()

def processEvents(gameLoop : GameLoop) : Unit
  val event = pygame.event.poll()
  def f() : Unit
    gameLoop.processEvent(event)
    processEvents(gameLoop)
  (pygame.helper.getType(event) == pygame.NOEVENT).ifTrue(
    () => 0,
    () => f())

def run(gameLoop : GameLoop) : Unit
  clock.tick(gameLoop.fps)
  gameLoop.oneIteration()
  processEvents(gameLoop)
  gameLoop.done.ifTrue(
    () => 0,
    () => run(gameLoop))

val width = 640
val height = 480
val screen = pygame.display.set_mode(pygame.helper.make2Tuple(width, height), 0, 0)

pygame.mixer.pre_init(44100, -16, 1, 512)
pygame.mixer.init()

val blip = pygame.mixer.Sound("blip.wav")
val blop = pygame.mixer.Sound("blop.wav")

resource type Paddle
  def draw(screen : pygame.Surface) : Unit
  def update() : Unit
  def processEvent(e : pygame.Event) : Unit
  def hitbox() : pygame.Rect

resource type NonInteractivePaddle
  var speed : Int
  var y : Int
  def draw(screen : pygame.Surface) : Unit
  def update() : Unit
  def hitbox() : pygame.Rect
  def setPaddleSpeed(speed : Int) : Unit

val paddleWidth = 20
val paddleHeight = 60

def makePaddle(paddleX : Int) : NonInteractivePaddle = new
  val x = paddleX
  var y : Int = (height - paddleHeight) / 2
  var speed : Int = 0

  def draw(screen : pygame.Surface) : Unit
    pygame.draw.rect(screen, pygame.helper.white, this.hitbox(), 0)

  def hitbox() : pygame.Rect
    pygame.Rect(this.x, this.y, paddleWidth, paddleHeight)

  def update() : Unit
    this.y = this.y + this.speed
    (this.y + paddleHeight > height).ifTrue(() => this.y = height - paddleHeight, () => 0)
    (this.y < 0).ifTrue(() => this.y = 0, () => 0)

  def setPaddleSpeed(speed : Int) : Unit
    this.speed = speed

def makePlayerPaddle() : Paddle = new
  var upPressed : Boolean = false
  var downPressed : Boolean = false
  val paddle = makePaddle(10)
  def draw(screen : pygame.Surface) : Unit = this.paddle.draw(screen)
  def update() : Unit = this.paddle.update()
  def hitbox() : pygame.Rect = this.paddle.hitbox()
  def processEvent(e : pygame.Event) : Unit
    val eventType = pygame.helper.getType(e)
    (eventType == pygame.KEYDOWN
     || eventType == pygame.KEYUP).ifTrue(
      () => (e.key == pygame.K_UP).ifTrue(
          () => this.upPressed = (eventType == pygame.KEYDOWN),
          () => (e.key == pygame.K_DOWN).ifTrue(
              () => this.downPressed = (eventType == pygame.KEYDOWN),
              () => 0)),
      () => 0)

    this.upPressed.ifTrue(
      () => this.paddle.speed = -3,
      () => this.downPressed.ifTrue(
        () => this.paddle.speed = 3,
        () => this.paddle.speed = 0))

val ball = new
  var x : Int = 0
  var y : Int = 0
  val radius = 10
  var xSpeed : Int = 2
  var ySpeed : Int = 2

  def draw(screen : pygame.Surface) : Unit
    pygame.draw.circle(screen,
                       pygame.helper.white,
                       pygame.helper.make2Tuple(this.x, this.y),
                       this.radius)

  def flipX() : Unit
    this.xSpeed = -this.xSpeed
    blip.play()

  def flipXBlop() : Unit
    this.xSpeed = -this.xSpeed
    blop.play()

  def flipY() : Unit
    this.ySpeed = -this.ySpeed
    blip.play()

  def update(leftHitbox : pygame.Rect, rightHitbox : pygame.Rect) : Unit
    (this.x < 0 || this.x > width).ifTrue(() => this.flipX(), () => 0)
    (this.y < 0 || this.y > height).ifTrue(() => this.flipY(), () => 0)

    (this.x < leftHitbox.right &&
     this.x > leftHitbox.left &&
     this.y > leftHitbox.top &&
     this.y < leftHitbox.bottom &&
     this.xSpeed < 0).ifTrue(() => this.flipXBlop(), () => 0)

    (this.x < rightHitbox.right &&
     this.x > rightHitbox.left &&
     this.y > rightHitbox.top &&
     this.y < rightHitbox.bottom &&
     this.xSpeed > 0).ifTrue(() => this.flipXBlop(), () => 0)

    this.x = this.x + this.xSpeed
    this.y = this.y + this.ySpeed

def makeAIPaddle() : Paddle = new
  val paddle = makePaddle(width - 30)
  def draw(screen : pygame.Surface) : Unit = this.paddle.draw(screen)
  def update() : Unit
    val center = this.paddle.y + paddleWidth / 2
    (center > ball.y).ifTrue(() => this.paddle.speed = -2,
                             () => this.paddle.speed = 0)
    (center < ball.y).ifTrue(() => this.paddle.speed = 2,
                             () => 0)
    this.paddle.update()
  def hitbox() : pygame.Rect = this.paddle.hitbox()
  def processEvent(e : pygame.Event) : Unit = 0

val loop : GameLoop = new
  val fps = 144
  var y : Int = 10
  var done : Boolean = false

  var upPressed : Boolean = false
  var downPressed : Boolean = false

  val width = 20
  val height = 60

  val playerPaddle = makePlayerPaddle()
  val aiPaddle = makeAIPaddle()

  def oneIteration() : Unit
    screen.fill(pygame.helper.black)
    this.playerPaddle.draw(screen)
    this.aiPaddle.draw(screen)
    ball.draw(screen)
    pygame.display.flip()

    val gameLoop = this
    this.playerPaddle.update()
    this.upPressed.ifTrue(() => gameLoop.y = gameLoop.y - 2,
                          () => 0)
    this.downPressed.ifTrue(() => gameLoop.y = gameLoop.y + 2,
                            () => 0)
    ball.update(this.playerPaddle.hitbox(), this.aiPaddle.hitbox())
    this.aiPaddle.update()

  def processEvent(e : pygame.Event) : Unit
    val eventType = pygame.helper.getType(e)
    this.playerPaddle.processEvent(e)
    (eventType == pygame.QUIT).ifTrue(() => this.done = true, () => 0)
    def keyEvents() : Unit
      (e.key == pygame.K_UP).ifTrue(() => this.upPressed = (eventType == pygame.KEYDOWN), () => 0)
      (e.key == pygame.K_DOWN).ifTrue(() => this.downPressed = (eventType == pygame.KEYDOWN), () => 0)
      (e.key == pygame.K_ESCAPE).ifTrue(() => this.done = true, () => 0)
    (eventType == pygame.KEYDOWN || eventType == pygame.KEYUP).ifTrue( () => keyEvents(), () => 0)
    

run(loop)
pygame.quit()

// blip.wav made by NoiseCollector at https://www.freesound.org/people/NoiseCollector/sounds/4391/
// blop.wav made by NoiseCollector at https://www.freesound.org/people/NoiseCollector/sounds/4385/